name: Deploy to Dev

# 액션 조건
on:
  # 푸시 했을 때
  push:
    # branch : dev
    branches: [ "dev" ]

# only readable
permissions:
  contents: read
jobs:
  build:
# ec2 intance Image
    runs-on: ["self-hosted", "Linux", "X64"]

    steps:
# java 버전 설정
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

# gradle 세팅
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

# 권한 부여 
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

# Copy properties files
      - name: Make application-dev.yml
        run: |
          touch ./src/main/resources/application-dev.yml
          echo "$PROPERTIES_DEV" > ./src/main/resources/application-dev.yml
        # Make env file
        env:
          PROPERTIES_DEV: ${{ secrets.PROPERTIES_DEV }}
        
# jar 파일 생성 
      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: squirmm/teampple-server-dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

# 도커 허브 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

# 도커 허브 푸시 
      - name: Docker build & push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}

# ec2 서버 접속 및 dir 생성
 	- name: create remote directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ec2-user
          key: ${{ secrets.KEY_DEV }}
          script: mkdir -p ~/srv/al2

      - name: copy source via ssh key
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -avzr --delete
          remote_path: ~/srv/al2
          remote_host: ${{ secrets.HOST_DEV }}
          remote_user: ec2-user
          remote_key: ${{ secrets.KEY_DEV }}

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ec2-user
          key: ${{ secrets.KEY_DEV }}
          script: |
            sh ~/srv/al2/config/scripts/deploy.sh
            sudo docker stop $(sudo docker ps -a -q)
            sudo docker rm $(sudo docker ps -a -q)
            sudo docker rmi $(sudo docker images -q)
            sudo docker-compose -f ~/srv/al2/docker-compose.yml pull
            sudo docker-compose -f ~/srv/al2/docker-compose.yml up --build -d
